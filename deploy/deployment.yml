kind: Deployment
apiVersion: apps/v1
metadata:
  name: edge-guard
  labels:
    app: edge-guard
    version: v1
    branch: BRANCH
    commit_id: COMMIT_ID
  annotations:
    proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
    sidecar.istio.io/rewriteAppHTTPProbers: "true"
spec:
  strategy:
    type: RollingUpdate # Configures the rolling update strategy, more at: https://confluence.dell.com/x/kZMXDw
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  progressDeadlineSeconds: 240
  replicas: 1 # How much replicas of the same pod we want to deploy
  revisionHistoryLimit: 2 # How far back we should keep old pod history in case that we would like to rollback to previous code
  selector:
    matchLabels:
      app: edge-guard
  template:
    metadata:
      labels:
        app: edge-guard
        authorized: "true"
        version: v1
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true" # Allows the Istio Mesh Service to install a Proxy container on the pod that called "sidecar"
    spec:
      securityContext:
        runAsUser: 1001
        fsGroup: 1001
        runAsGroup: 1001
      containers:
        - name: edge-guard
          image: amaas-eos-drm2.cec.lab.emc.com:5074/edge-guard/TAG # The docker image location to deploy the pod from (pipeline will update this automatically)
          resources:
            requests:
              cpu: 100m # How much CPU we are expecting the app container to require.
          ports:
            - containerPort: 8080
          startupProbe: # More on probes configuration: https://confluence.dell.com/x/pZMXDw
            initialDelaySeconds: 40
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30
            exec:
              command:
                - curl
                - -f
                - http://localhost:8080/edge-guard/actuator/health/readiness
          readinessProbe: # Our readinessProbe configurations, more at: https://confluence.dell.com/x/pZMXDw
            exec:
              command:
                - curl
                - -f
                - http://localhost:8080/edge-guard/actuator/health/readiness
            timeoutSeconds: 2
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - curl
                - -f
                - http://localhost:8080/edge-guard/actuator/health/liveness
            timeoutSeconds: 2
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 10
          envFrom:
            - configMapRef:
                name: edge-guard
            - configMapRef:
                name: global-config
                optional: true
            - secretRef:
                name: global-secret
                optional: true
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
          env: # All configuration that the pod will get from the deployed environment, like: activeMQ details, DB's details, etc...
            - name: JDK_JAVA_OPTIONS
              value: -Xmx1g
            - name: config.reload.file-location
              value: /etc/config/application.properties
            - name: config.reload.enabled
              value: "true"
            - name: APP_NAME
              value: "DEPLOYMENT-NAME-NAME-SPACE-NAME-CLUSTER-NAME"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
      volumes:
        - name: config-volume
          configMap:
            name: edge-guard
      imagePullSecrets:
        - name: harbor-secret
